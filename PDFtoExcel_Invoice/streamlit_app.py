import streamlit as st
import pypdf
import json
import pandas as pd
import io
from openai import OpenAI
import logging
import traceback
import re
import plotly.express as px

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configurar un manejador de logging para Streamlit
class StreamlitHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        st.error(log_entry)

streamlit_handler = StreamlitHandler()
streamlit_handler.setLevel(logging.ERROR)
logger.addHandler(streamlit_handler)

# Definir la API key (usar st.secrets en producci√≥n)
client = OpenAI(api_key=st.secrets["API_KEY"])

def read_pdf(file):
    pdf_reader = pypdf.PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def extract_json_from_text(text):
    json_match = re.search(r'\{[\s\S]*\}', text)
    if json_match:
        return json_match.group()
    return None

def generate_json_from_pdf(pdf_content):
    prompt = f"""
    Analiza minuciosamente el siguiente contenido de una factura PDF y genera un JSON estructurado y detallado. S√© extremadamente preciso y aseg√∫rate de que cada clave tenga un √∫nico valor, no listas. Incluye absolutamente toda la informaci√≥n relevante de la factura.

    Realiza las siguientes tareas espec√≠ficas con m√°xima precisi√≥n:
    1. Identifica el tipo de servicio recibido o producto comprado y devu√©lvelo con el formato "tipo: [descripci√≥n breve y precisa]".
    2. Identifica el tipo de pago realizado entre estas opciones: pago en efectivo, pago por recibo domiciliado, pago por transferencia y pago por tarjeta. Devu√©lvelo con el formato "pago: [tipo de pago]". Si no se especifica, indica "pago: no especificado".
    3. Bas√°ndote en la informaci√≥n anterior, proporciona el asiento contable que mejor se ajuste seg√∫n la contabilidad espa√±ola. El asiento contable debe ser una cadena de texto con el siguiente formato:
       "asiento_contable: (DEBE) Cuenta1 XXXX‚Ç¨ (N√∫mero), Cuenta2 YYYY‚Ç¨ (N√∫mero) a (HABER) Cuenta3 ZZZZ‚Ç¨ (N√∫mero), Cuenta4 WWWW‚Ç¨ (N√∫mero)"
       Donde las cuentas deben ser espec√≠ficas del Plan General Contable espa√±ol, los importes deben cuadrar, y se debe incluir el n√∫mero de cuenta entre par√©ntesis. Incluye todos los detalles, como descuentos si los hubiera.
    4. Genera un resumen general que incluya una descripci√≥n de la factura, un resumen del asiento contable e informaci√≥n tributaria y fiscal para gestionar la factura.

    Contenido del PDF:
    {pdf_content}

    Genera un JSON que incluya todos estos detalles de manera estructurada y precisa. Aseg√∫rate de que cada campo tenga un valor √∫nico y espec√≠fico. SOLO DEVUELVE EL JSON, sin ning√∫n texto adicional antes o despu√©s.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Eres un experto contable de alta precisi√≥n especializado en an√°lisis detallado de facturas y contabilidad espa√±ola. Debes generar √∫nicamente un JSON v√°lido sin ning√∫n texto adicional."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1
        )

        json_content = response.choices[0].message.content.strip()
        logger.info(f"JSON content generated: {json_content[:500]}...")
        
        json_string = extract_json_from_text(json_content)
        if json_string is None:
            logger.error("No se pudo extraer un JSON v√°lido de la respuesta.")
            return None

        try:
            parsed_json = json.loads(json_string)
            return parsed_json
        except json.JSONDecodeError as je:
            logger.error(f"Error al decodificar JSON: {str(je)}")
            logger.error(f"Contenido JSON que caus√≥ el error: {json_string}")
            return None
    except Exception as e:
        logger.error(f"Error al generar el JSON: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return None



# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Herramientas PDF", layout="wide")

# Ocultar el men√∫ principal
st.markdown("""
<style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# Estilos personalizados actualizados
st.markdown("""
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: white;
    }
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    h1 {
        color: #333;
        text-align: center;
        font-size: 2.5em;
        margin-bottom: 20px;
    }
    .subtitle {
        color: #666;
        text-align: center;
        font-size: 1.2em;
        margin-bottom: 40px;
    }
    .tool-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
    }
    .tool-card {
        background-color: #f0f2f5;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 20px;
        width: calc(33.333% - 20px);
        text-align: center;
        transition: transform 0.3s ease;
    }
    .tool-card:hover {
        transform: translateY(-5px);
    }
    .tool-icon {
        font-size: 3em;
        margin-bottom: 10px;
    }
    .tool-title {
        font-weight: bold;
        margin-bottom: 10px;
    }
    .tool-description {
        font-size: 0.9em;
        color: #666;
    }
    .stButton>button {
        background-color: #e74c3c;
        color: white;
        font-weight: bold;
        border: none;
        border-radius: 20px;
        padding: 10px 20px;
        transition: background-color 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #c0392b;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo y subt√≠tulo
st.markdown("<h1>Herramientas online para amantes de los PDF</h1>", unsafe_allow_html=True)
st.markdown("<p class='subtitle'>Herramientas online y completamente gratuitas para unir PDF, separar PDF, comprimir PDF, convertir documentos Office a PDF, PDF a JPG y JPG a PDF. No se necesita instalaci√≥n.</p>", unsafe_allow_html=True)

# Definir las herramientas
tools = [
    {"name": "Unir PDF", "icon": "üîó", "description": "Une PDFs en el orden que prefieras. ¬°R√°pido y f√°cil!"},
    {"name": "Dividir PDF", "icon": "‚úÇÔ∏è", "description": "Extrae una o varias p√°ginas de tu PDF o convierte cada p√°gina del PDF en un archivo PDF independiente."},
    {"name": "Comprimir PDF", "icon": "üì¶", "description": "Consigue que tu documento PDF pese menos y, al mismo tiempo, mantener la m√°xima calidad posible. Optimiza tus archivos PDF."},
    {"name": "PDF a Word", "icon": "üìÑ", "description": "Convierte f√°cilmente tus archivos PDF a DOCX de WORD editables."},
    {"name": "PDF a PowerPoint", "icon": "üìä", "description": "Convierte tus archivos PDF a presentaciones PPTX de POWERPOINT."},
    {"name": "PDF a Excel", "icon": "üìà", "description": "Extrae directamente datos de PDF a Excel en pocos segundos."}
]

# Crear la cuadr√≠cula de herramientas
st.markdown("<div class='tool-grid'>", unsafe_allow_html=True)
for tool in tools:
    st.markdown(f"""
        <div class='tool-card'>
            <div class='tool-icon'>{tool['icon']}</div>
            <div class='tool-title'>{tool['name']}</div>
            <div class='tool-description'>{tool['description']}</div>
        </div>
    """, unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)
]

# Crear la cuadr√≠cula de herramientas
st.markdown("<div class='tool-grid'>", unsafe_allow_html=True)
for tool in tools:
    st.markdown(f"""
        <div class='tool-card'>
            <div class='tool-icon'>{tool['icon']}</div>
            <div class='tool-title'>{tool['name']}</div>
            <div class='tool-description'>{tool['description']}</div>
        </div>
    """, unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# Secci√≥n de carga de archivo (oculta por defecto)
if st.button("Cargar PDF"):
    uploaded_file = st.file_uploader("Selecciona tu PDF", type="pdf")
    if uploaded_file is not None:
        pdf_content = read_pdf(uploaded_file)
        st.success("PDF cargado correctamente")
        if st.button("Analizar PDF"):
            # Aqu√≠ ir√≠a la l√≥gica de an√°lisis del PDF
            st.info("Analizando PDF...")
            # Simulaci√≥n de an√°lisis (reemplazar con la l√≥gica real)
            st.json({
                "nombre_archivo": uploaded_file.name,
                "num_paginas": 5,
                "tama√±o": "1.2 MB"
            })

# Footer
st.markdown("""
<hr>
<p style='text-align: center; color: #7f8c8d;'>¬© 2024 Herramientas PDF. Todos los derechos reservados.</p>
""", unsafe_allow_html=True)
